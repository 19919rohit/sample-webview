apply plugin: 'com.android.application'

android {
    compileSdkVersion 30
    defaultConfig {
        applicationId "com.snc.sample.webview"
        minSdkVersion 16
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        //testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        storeFile {
            //storeFile file('./keystore/upload_keystore.jks')
            //storePassword '<password>'
            //keyAlias '<alias>'
            //keyPassword '<password>'

            v1SigningEnabled true
            v2SigningEnabled true
        }
    }
    buildTypes {
        release {
            //signingConfig signingConfigs.storeFile
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            buildConfigField "String", "ASSET_BASE_URL", "\"snc.com\""
        }
        debug {
            //signingConfig signingConfigs.storeFile

            buildConfigField "String", "ASSET_BASE_URL", "\"snc.com\""
        }
    }
    //flavorDimensions "version"
    productFlavors {

    }
    sourceSets {

    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/ASL2.0'
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "androidx.multidex:multidex:2.0.1"

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.12'
    //noinspection GradleCompatible
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    // runtime permission library
    implementation 'gun0912.ted:tedpermission:2.2.1'

    // retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp3:okhttp:4.8.1'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.8.1'

    // androidx.webkit.WebViewAssetLoader
    implementation "androidx.webkit:webkit:1.3.0"
}

android.applicationVariants.all { variant ->
    variant.assembleProvider.configure {
        doLast {
            println "\n\n"
            println "###########################################"
            println "#                                         #"
            println "#       ######    ##     #     ######     #"
            println "#      #          #  #   #    #           #"
            println "#      #######    #   #  #    #           #"
            println "#            #    #    # #    #           #"
            println "#      ######     #     ##     ######     #"
            println "#                                         #"
            println "#      Copyright (c) 2016 Aaron Jo.       #"
            println "#                                         #"
            println "#          mcharima5@gmail.com            #"
            println "#                                         #"
            println "###########################################"
            println "\n\n"

            variant.outputs.all { output ->
                println "============================================================"
                println "project id: $variant.applicationId"
                println "project version : $variant.versionName"
                println "project revision : $variant.versionCode"
                println "build name: ${variant.name}"
                println "build type: ${variant.buildType.name}"
                println "output dir : " + variant.packageApplicationProvider.get().outputDirectory
                println "output file : $output.outputFileName"
                println "============================================================"
                println "\n"
            }
        }
    }
}
